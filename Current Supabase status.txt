**Current Supabase tables:
1.create table public.chat_summaries (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  thread_id uuid not null,
  summary_text text not null,
  summary_embedding public.vector null,
  start_date timestamp with time zone not null,
  end_date timestamp with time zone not null,
  token_count integer null,
  created_at timestamp with time zone not null default now(),
  constraint chat_summaries_pkey primary key (id),
  constraint chat_summaries_thread_id_fkey foreign KEY (thread_id) references chat_threads (id) on delete CASCADE,
  constraint chat_summaries_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;
----
create table public.chat_threads (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid null,
  title text null default 'Main thread'::text,
  created_at timestamp with time zone null default timezone ('utc'::text, now()),
  constraint chat_threads_pkey primary key (id),
  constraint chat_threads_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;
----
2. create table public.chat_messages (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid null,
  thread_id uuid null,
  role text not null,
  message text not null,
  metadata jsonb null,
  created_at timestamp with time zone null default timezone ('utc'::text, now()),
  embedding public.vector null,
  constraint chat_messages_pkey primary key (id),
  constraint chat_messages_thread_id_fkey foreign KEY (thread_id) references chat_threads (id) on delete CASCADE,
  constraint chat_messages_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint chat_messages_role_check check (
    (
      role = any (array['user'::text, 'assistant'::text])
    )
  )
) TABLESPACE pg_default;
----
3. create table public.profiles (
  user_id uuid not null,
  nickname text not null,
  telegram_handle text null,
  language text null,
  current_situation text null,
  focused_problem text null,
  top_goals text[] null,
  other_goal text null,
  assistant_name text null,
  persona text null,
  tone text null,
  gender text null,
  response_length text null,
  content_style text null,
  reminders_enabled boolean null default false,
  reminder_type text null,
  reminder_frequency text null,
  reminder_channel text null,
  reminder_time text null,
  avoid_topics text[] null,
  other_avoid_topic text null,
  preferred_response_style text null,
  emoji_preference text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint profiles_pkey primary key (user_id),
  constraint profiles_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint profiles_emoji_preference_check check (
    (
      emoji_preference = any (array['none'::text, 'less'::text, 'more'::text])
    )
  ),
  constraint profiles_gender_check check (
    (
      gender = any (array['male'::text, 'female'::text])
    )
  ),
  constraint profiles_language_check check (
    (
      language = any (array['EN'::text, 'DE'::text, 'UK'::text])
    )
  ),
  constraint profiles_response_length_check check (
    (
      response_length = any (
        array['short'::text, 'medium'::text, 'long'::text]
      )
    )
  )
) TABLESPACE pg_default;

create trigger on_profile_updated BEFORE
update on profiles for EACH row
execute FUNCTION handle_updated_at ();
---
**Current Supabase functions:
1. match_chat_messages (querry)
  select
    id,
    thread_id,
    message,
    role,
    created_at,
    1 - (embedding <=> query_embedding) as similarity
  from chat_messages
  where embedding is not null
  order by embedding <=> query_embedding
  limit match_count;
2. match_chat_messages (match)
  select
    chat_messages.id,
    chat_messages.message,
    chat_messages.role,
    chat_messages.created_at
  from chat_messages
  where chat_messages.user_id = match_chat_messages.user_id
    and chat_messages.thread_id = match_chat_messages.thread_id
    and chat_messages.embedding <#> match_embedding < match_threshold
  order by chat_messages.embedding <#> match_embedding
  limit match_count;
3. match_chat_summaries

  SELECT
    cs.id,
    cs.summary_text,
    cs.start_date,
    cs.end_date,
    cs.created_at,
    1 - (cs.summary_embedding <=> query_embedding) AS similarity -- Calculate cosine similarity (1 - cosine distance)
  FROM
    public.chat_summaries cs
  WHERE
    cs.thread_id = target_thread_id -- Match the thread ID
    AND cs.user_id = target_user_id -- Match the user ID (ensure RLS also enforces this)
    AND cs.summary_embedding IS NOT NULL -- Only consider summaries that have an embedding
    AND 1 - (cs.summary_embedding <=> query_embedding) >= match_threshold -- Apply the similarity threshold filter
  ORDER BY
    similarity DESC -- Order by similarity score, highest first
    -- Alternative: Order by distance ASC: cs.summary_embedding <=> query_embedding ASC
  LIMIT match_count; -- Limit the number of results
----
**Supabase URL
https://clltsokvisuguvolbsgw.supabase.co
